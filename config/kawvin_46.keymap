/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    /*
    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder>;
        //sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <20>;
    };
*/

    macros {
        Ky_MyPwd: Ky_MyPwd {
            label = "Ky_MyPwd";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp N0 &kp N1 &kp N2 &kp N3 &kp N4 &kp N5>;
        };

        layer_1: layer_1 {
            label = "layer 1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press>,
                <&ltq 0 END>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(300,100,50)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&lt 0 END>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(240,50,30)>;
        };

        layer_2: layer_2 {
            label = "layer 2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press>,
                <&mo 0>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(175,100,50)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 0>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(240,50,30)>;
        };

        layer_3: layer_3 {
            label = "layer 3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press>,
                <&lt 0 DEL>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(0,100,50)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&lt 0 DEL>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(240,50,30)>;
        };
    };

    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            label = "HOMEROW_MODS";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            label = "AUTO_SHIFT";
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <200>;
        };

        bkt_left {
            bindings = <&mt RIGHT_BRACKET LEFT_BRACKET>;
            key-positions = <16 17>;
            timeout-ms = <200>;
        };

        bkt_right {
            bindings = <&mt LEFT_BRACKET RIGHT_BRACKET>;
            key-positions = <20 21>;
            timeout-ms = <200>;
        };

        par_left {
            bindings = <&mt RIGHT_PARENTHESIS LEFT_PARENTHESIS>;
            key-positions = <3 2>;
            timeout-ms = <200>;
        };

        par_right {
            bindings = <&mt LEFT_PARENTHESIS RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
            timeout-ms = <200>;
        };

        brace_left {
            bindings = <&mt RIGHT_BRACE LEFT_BRACE>;
            key-positions = <14 15>;
            timeout-ms = <200>;
        };

        brace_right {
            bindings = <&mt LEFT_BRACE RIGHT_BRACE>;
            key-positions = <23 22>;
            timeout-ms = <200>;
        };

        bac_pipe {
            bindings = <&mt PIPE BACKSLASH>;
            key-positions = <13 14>;
            timeout-ms = <200>;
        };

        minus_under_left {
            bindings = <&mt UNDER MINUS>;
            key-positions = <1 2>;
            timeout-ms = <200>;
        };

        comma_dot {
            bindings = <&mt DOT COMMA>;
            key-positions = <48 49>;
            timeout-ms = <200>;
        };

        bslh_fslh {
            bindings = <&mt BSLH SLASH>;
            key-positions = <48 47>;
            timeout-ms = <200>;
        };

        direction_left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <28 29>;
            timeout-ms = <200>;
        };

        direction_right {
            bindings = <&kp RIGHT>;
            key-positions = <29 30>;
            timeout-ms = <200>;
        };

        direction_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <30 14>;
            timeout-ms = <300>;
        };

        direction_down {
            bindings = <&kp DOWN>;
            key-positions = <30 46>;
            timeout-ms = <300>;
        };

        minus_under_right {
            bindings = <&mt UNDER MINUS>;
            key-positions = <9 10>;
            timeout-ms = <200>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <39 40>;
        };

        question {
            bindings = <&none>;
            key-positions = <45 46>;
        };

        vol_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <58 59 60>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <58 60>;
        };

        vol_down {
            bindings = <&kp C_VOL_DN>;
            key-positions = <58 59>;
        };
    };

    //scroll_encoder: scroll_encoder {
    //    compatible = "zmk,behavior-sensor-rotate";
    //    #sensor-binding-cells = <0>;
    //    bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
    //    tap-ms = <30>;
    //};

    keymap {
        compatible = "zmk,keymap";

        qwert_layer {
            //  ---------------------------------------------------------------------------------
            //  |A_GRAVE ESC|N1  |N2   |N3  |N4       |N5   |    |    |    |     |    |    |    |     |    |N6   |N7  |N8   |N9   |N0  |MINUS |
            //  |TAB        |Q   |W    |E   |R        |T    |    |    |UP  |     |    |    |UP  |     |    |Y    |U   |I    |O    |P   |LBKT  |
            //  |LCTRL      |A   |S    |D   |F        |G    |    |LEFT|N1  |RIGHT|    |LEFT|N2  |RIGHT|    |H    |J   |K    |L    |SEMI|SQT   |
            //  |LSHIFT     |Z   |X    |C   |V        |B    |    |    |DOWN|     |    |    |DOWN|     |    |N    |M   |COMMA|DOT  |FSLH|RSHIFT|
            //  |           |    |LCTRL|LALT|&lt 2 DEL|SPACE|    |    |    |     |    |    |    |     |    |ENTER|BSPC|RGUI |RCTRL|    |      |

            bindings = <
&mt GRAVE ESC  &kp N1    &kp N2     &kp N3       &kp N4     &kp N5      &kp N6    &kp N7         &kp N8     &kp N9    &kp N0     &mt UNDERSCORE MINUS
&kp TAB        &kp Q     &kp W      &kp E        &kp R      &kp T       &kp UP    &kp PG_UP      &kp Y      &kp U     &kp I      &kp O                 &kp P     &mt RIGHT_BRACKET LEFT_BRACKET
&kp LCTRL      &kp A     &kp S      &kp D        &lt 4 F    &kp G       &kp LEFT  &kp N1         &kp RIGHT  &kp HOME  &kp N2     &kp END               &kp H     &kp J                           &kp K  &kp L  &kp SEMI  &kp SQT
&kp LSHIFT     &kp Z     &kp X      &kp C        &kp V      &kp B       &kp DOWN  &kp PAGE_DOWN  &kp N      &kp M     &kp COMMA  &kp DOT               &kp FSLH  &kp RSHIFT
&kp LWIN       &kp LALT  &lt 2 DEL  &lt 1 SPACE  &kp SPACE  &lt 2 BSPC  &kp RALT  &kp RCTRL
            >;

            label = "Qwert";

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        number_layer {
            //  ---------------------------------------------------------------------------------
            //  |    |N6  |N7  |N8  |N9  |N0  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |N4  |N5  |N6  |    |F12 |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |N1  |N2  |N3  |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |N0  |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |

            bindings = <
&kp N0            &trans           &trans           &trans           &trans       &trans      &kp KP_MULTIPLY  &trans          &trans                     &trans          &trans      &to 1
&trans            &kp N6           &kp N7           &kp N8           &kp N9       &kp KP_DOT  &trans           &mmv MOVE_UP    &mt KP_DIVIDE KP_MULTIPLY  &kp N4          &kp N5      &kp N6           &mkp MB4     &mkp MB5
&trans            &kp KP_SLASH     &kp KP_MULTIPLY  &kp KP_SUBTRACT  &kp KP_PLUS  &kp ENTER   &trans           &trans          &trans                     &mmv MOVE_LEFT  &trans      &mmv MOVE_RIGHT  &kp KP_PLUS  &kp N1     &kp N2  &kp N3  &mkp MCLK  &trans
&trans            &kp HOME         &kp END          &kp PG_UP        &kp PG_DN    &kp BSPC    &trans           &mmv MOVE_DOWN  &kp KP_SUBTRACT            &kp N0          &kp KP_DOT  &kp KP_DOT       &mkp LCLK    &mkp RCLK
&kp LS(LC(HOME))  &kp LS(LC(END))  &trans           &trans           &kp ENTER    &trans      &trans           &trans
            >;

            label = "Number";

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        control_layer {
            //  ---------------------------------------------------------------------------------
            //  |    |F1  |F2  |F3  |F4  |F5  |    |    |    |    |    |    |    |    |    |F6  |F7  |F8  |F9  |F10 |F11 |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |RBKT|
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |

            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bootloader    &bootloader  &trans  &trans  &trans         &trans        &trans
&ext_power EP_TOG  &trans           &rgb_ug RGB_EFF  &kp ENTER        &trans           &trans         &trans       &trans  &trans  &kp HOME       &kp UP_ARROW  &kp END  &trans  &trans
&rgb_ug RGB_TOG    &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &rgb_ug RGB_BRI  &kp LS(LC(N8))   &kp LC(ENTER)  &trans       &trans  &trans  &trans         &trans        &trans   &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&out OUT_TOG       &rgb_ug RGB_SPD  &rgb_ug RGB_SPI  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &trans         &trans       &trans  &trans  &kp PAGE_DOWN  &kp PG_UP     &trans   &trans  &trans
&trans             &trans           &trans           &trans           &trans           &trans         &trans       &trans
            >;

            label = "Control";

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        symbol_layer {
            //  ---------------------------------------------------------------------------------
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |

            bindings = <
&trans  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans    &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans    &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans    &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans    &trans    &trans    &trans    &trans  &trans
            >;

            label = "Symbol";

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        function_layer {
            //  ---------------------------------------------------------------------------------
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |

            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp F11  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp F12  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans
            >;

            label = "Function";

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        mouse_layer {
            //  ---------------------------------------------------------------------------------
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
            //  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Mouse";

            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            //sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
